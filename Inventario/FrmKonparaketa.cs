using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using Inventario.App_Code.Model;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Inventario
{
    public partial class FrmKonparaketa : Form
    {
        public FrmKonparaketa()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Inventario.App_Code.Model.QueryInner dbContext = new Inventario.App_Code.Model.QueryInner();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //dbContext.DBAlmacenesch.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    gridControl1.DataSource = dbContext.DBAlmacenesch.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());


            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Inventario.App_Code.Model.QueryInner dbContext1 = new Inventario.App_Code.Model.QueryInner();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext1.DBAlmacenesch.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                dBAlmaceneschBindingSource.DataSource = dbContext1.DBAlmacenesch.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            entityServerModeSource1.QueryableSource = new Inventario.App_Code.Model.QueryInner().DBAlmacenesch;
        }


        public async static Task<List<JoinKlas>> GetLotesAsync(string filter)
        {
            QueryInner db = new QueryInner();
            var query = from a in db.DBLotes 
                        join b in db.DBAlmacenesch on a.CODALMACEN equals b.CODALMACEN into gj
                        from subpet in gj.DefaultIfEmpty()//left outer join egiteko
                        where subpet.IDENT == filter
                        select new JoinKlas{ COD_LOTE=a.COD_LOTE, LOTE= a.LOTE, CODALMACEN=a.CODALMACEN, IDENT = subpet.IDENT };
            return await query.ToListAsync();
        }

        private async void button1_ClickAsync(object sender, EventArgs e)
        {
            string filter = "ATALLU";
            List<JoinKlas> listLotes=await GetLotesAsync(filter);
            gridControl1.DataSource = listLotes;
        }
    }

    public class JoinKlas
    {
        [Key, Column(Order = 0)]
        public int COD_LOTE { get; set; }
        public string LOTE { get; set; }
        //[ForeignKey("ALMACENESCH")]
        public string CODALMACEN { get; set; }
        public string IDENT { get; set; }
    }
}
